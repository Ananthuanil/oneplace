/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateCommunityActivityArgs } from "./CreateCommunityActivityArgs";
import { UpdateCommunityActivityArgs } from "./UpdateCommunityActivityArgs";
import { DeleteCommunityActivityArgs } from "./DeleteCommunityActivityArgs";
import { CommunityActivityFindManyArgs } from "./CommunityActivityFindManyArgs";
import { CommunityActivityFindUniqueArgs } from "./CommunityActivityFindUniqueArgs";
import { CommunityActivity } from "./CommunityActivity";
import { CommunityActivityFeedbackFindManyArgs } from "../../communityActivityFeedback/base/CommunityActivityFeedbackFindManyArgs";
import { CommunityActivityFeedback } from "../../communityActivityFeedback/base/CommunityActivityFeedback";
import { Community } from "../../community/base/Community";
import { CommunityActivityService } from "../communityActivity.service";

@graphql.Resolver(() => CommunityActivity)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CommunityActivityResolverBase {
  constructor(
    protected readonly service: CommunityActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _communityActivitiesMeta(
    @graphql.Args() args: CommunityActivityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [CommunityActivity])
  async communityActivities(
    @graphql.Args() args: CommunityActivityFindManyArgs
  ): Promise<CommunityActivity[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => CommunityActivity, { nullable: true })
  async communityActivity(
    @graphql.Args() args: CommunityActivityFindUniqueArgs
  ): Promise<CommunityActivity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => CommunityActivity)
  async createCommunityActivity(
    @graphql.Args() args: CreateCommunityActivityArgs
  ): Promise<CommunityActivity> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        community: {
          connect: args.data.community,
        },
      },
    });
  }

  @Public()
  @graphql.Mutation(() => CommunityActivity)
  async updateCommunityActivity(
    @graphql.Args() args: UpdateCommunityActivityArgs
  ): Promise<CommunityActivity | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          community: {
            connect: args.data.community,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => CommunityActivity)
  async deleteCommunityActivity(
    @graphql.Args() args: DeleteCommunityActivityArgs
  ): Promise<CommunityActivity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [CommunityActivityFeedback])
  async communityActivityFeedbacks(
    @graphql.Parent() parent: CommunityActivity,
    @graphql.Args() args: CommunityActivityFeedbackFindManyArgs
  ): Promise<CommunityActivityFeedback[]> {
    const results = await this.service.findCommunityActivityFeedbacks(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => Community, { nullable: true })
  async community(
    @graphql.Parent() parent: CommunityActivity
  ): Promise<Community | null> {
    const result = await this.service.getCommunity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
