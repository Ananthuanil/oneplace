/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreatePartnerArgs } from "./CreatePartnerArgs";
import { UpdatePartnerArgs } from "./UpdatePartnerArgs";
import { DeletePartnerArgs } from "./DeletePartnerArgs";
import { PartnerFindManyArgs } from "./PartnerFindManyArgs";
import { PartnerFindUniqueArgs } from "./PartnerFindUniqueArgs";
import { Partner } from "./Partner";
import { OpportunityFindManyArgs } from "../../opportunity/base/OpportunityFindManyArgs";
import { Opportunity } from "../../opportunity/base/Opportunity";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { PartnerService } from "../partner.service";

@graphql.Resolver(() => Partner)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PartnerResolverBase {
  constructor(
    protected readonly service: PartnerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _partnersMeta(
    @graphql.Args() args: PartnerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [Partner])
  async partners(
    @graphql.Args() args: PartnerFindManyArgs
  ): Promise<Partner[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Partner, { nullable: true })
  async partner(
    @graphql.Args() args: PartnerFindUniqueArgs
  ): Promise<Partner | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => Partner)
  async createPartner(
    @graphql.Args() args: CreatePartnerArgs
  ): Promise<Partner> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @Public()
  @graphql.Mutation(() => Partner)
  async updatePartner(
    @graphql.Args() args: UpdatePartnerArgs
  ): Promise<Partner | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => Partner)
  async deletePartner(
    @graphql.Args() args: DeletePartnerArgs
  ): Promise<Partner | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [Opportunity])
  async opportunities(
    @graphql.Parent() parent: Partner,
    @graphql.Args() args: OpportunityFindManyArgs
  ): Promise<Opportunity[]> {
    const results = await this.service.findOpportunities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => [Project])
  async projects(
    @graphql.Parent() parent: Partner,
    @graphql.Args() args: ProjectFindManyArgs
  ): Promise<Project[]> {
    const results = await this.service.findProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
