/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateInterviewArgs } from "./CreateInterviewArgs";
import { UpdateInterviewArgs } from "./UpdateInterviewArgs";
import { DeleteInterviewArgs } from "./DeleteInterviewArgs";
import { InterviewFindManyArgs } from "./InterviewFindManyArgs";
import { InterviewFindUniqueArgs } from "./InterviewFindUniqueArgs";
import { Interview } from "./Interview";
import { InterviewFeedbackFindManyArgs } from "../../interviewFeedback/base/InterviewFeedbackFindManyArgs";
import { InterviewFeedback } from "../../interviewFeedback/base/InterviewFeedback";
import { SkillLevelFindManyArgs } from "../../skillLevel/base/SkillLevelFindManyArgs";
import { SkillLevel } from "../../skillLevel/base/SkillLevel";
import { Candidate } from "../../candidate/base/Candidate";
import { User } from "../../user/base/User";
import { Opportunity } from "../../opportunity/base/Opportunity";
import { InterviewService } from "../interview.service";

@graphql.Resolver(() => Interview)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class InterviewResolverBase {
  constructor(
    protected readonly service: InterviewService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _interviewsMeta(
    @graphql.Args() args: InterviewFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [Interview])
  async interviews(
    @graphql.Args() args: InterviewFindManyArgs
  ): Promise<Interview[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Interview, { nullable: true })
  async interview(
    @graphql.Args() args: InterviewFindUniqueArgs
  ): Promise<Interview | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => Interview)
  async createInterview(
    @graphql.Args() args: CreateInterviewArgs
  ): Promise<Interview> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,

        interviewer: args.data.interviewer
          ? {
              connect: args.data.interviewer,
            }
          : undefined,

        opportunity: args.data.opportunity
          ? {
              connect: args.data.opportunity,
            }
          : undefined,
      },
    });
  }

  @Public()
  @graphql.Mutation(() => Interview)
  async updateInterview(
    @graphql.Args() args: UpdateInterviewArgs
  ): Promise<Interview | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,

          interviewer: args.data.interviewer
            ? {
                connect: args.data.interviewer,
              }
            : undefined,

          opportunity: args.data.opportunity
            ? {
                connect: args.data.opportunity,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => Interview)
  async deleteInterview(
    @graphql.Args() args: DeleteInterviewArgs
  ): Promise<Interview | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [InterviewFeedback])
  async feedback(
    @graphql.Parent() parent: Interview,
    @graphql.Args() args: InterviewFeedbackFindManyArgs
  ): Promise<InterviewFeedback[]> {
    const results = await this.service.findFeedback(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SkillLevel])
  @nestAccessControl.UseRoles({
    resource: "SkillLevel",
    action: "read",
    possession: "any",
  })
  async skillMatrix(
    @graphql.Parent() parent: Interview,
    @graphql.Args() args: SkillLevelFindManyArgs
  ): Promise<SkillLevel[]> {
    const results = await this.service.findSkillMatrix(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => Candidate, { nullable: true })
  async candidate(
    @graphql.Parent() parent: Interview
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => User, { nullable: true })
  async interviewer(@graphql.Parent() parent: Interview): Promise<User | null> {
    const result = await this.service.getInterviewer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => Opportunity, { nullable: true })
  async opportunity(
    @graphql.Parent() parent: Interview
  ): Promise<Opportunity | null> {
    const result = await this.service.getOpportunity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
