/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
} from "class-validator";
import { CommunicationFeedback } from "../../communicationFeedback/base/CommunicationFeedback";
import { Type } from "class-transformer";
import { Interview } from "../../interview/base/Interview";
import { SkillLevel } from "../../skillLevel/base/SkillLevel";
import { SkillSet } from "../../skillSet/base/SkillSet";
import { EnumInterviewFeedbackStatus } from "./EnumInterviewFeedbackStatus";
@ObjectType()
class InterviewFeedback {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  attitudeFeedback!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comments!: string | null;

  @ApiProperty({
    required: false,
    type: () => CommunicationFeedback,
  })
  @ValidateNested()
  @Type(() => CommunicationFeedback)
  @IsOptional()
  communication?: CommunicationFeedback | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  feedback!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Interview,
  })
  @ValidateNested()
  @Type(() => Interview)
  @IsOptional()
  interview?: Interview | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logicFeedback!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  relevantTechFeedback!: string | null;

  @ApiProperty({
    required: false,
    type: () => [SkillLevel],
  })
  @ValidateNested()
  @Type(() => SkillLevel)
  @IsOptional()
  skillMatrices?: Array<SkillLevel>;

  @ApiProperty({
    required: false,
    type: () => [SkillSet],
  })
  @ValidateNested()
  @Type(() => SkillSet)
  @IsOptional()
  skillSets?: Array<SkillSet>;

  @ApiProperty({
    required: false,
    enum: EnumInterviewFeedbackStatus,
  })
  @IsEnum(EnumInterviewFeedbackStatus)
  @IsOptional()
  @Field(() => EnumInterviewFeedbackStatus, {
    nullable: true,
  })
  status?: "Passed" | "NotPassed" | "Hold" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { InterviewFeedback };
