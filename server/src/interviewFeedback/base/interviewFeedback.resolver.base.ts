/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateInterviewFeedbackArgs } from "./CreateInterviewFeedbackArgs";
import { UpdateInterviewFeedbackArgs } from "./UpdateInterviewFeedbackArgs";
import { DeleteInterviewFeedbackArgs } from "./DeleteInterviewFeedbackArgs";
import { InterviewFeedbackFindManyArgs } from "./InterviewFeedbackFindManyArgs";
import { InterviewFeedbackFindUniqueArgs } from "./InterviewFeedbackFindUniqueArgs";
import { InterviewFeedback } from "./InterviewFeedback";
import { SkillLevelFindManyArgs } from "../../skillLevel/base/SkillLevelFindManyArgs";
import { SkillLevel } from "../../skillLevel/base/SkillLevel";
import { SkillSetFindManyArgs } from "../../skillSet/base/SkillSetFindManyArgs";
import { SkillSet } from "../../skillSet/base/SkillSet";
import { CommunicationFeedback } from "../../communicationFeedback/base/CommunicationFeedback";
import { Interview } from "../../interview/base/Interview";
import { InterviewFeedbackService } from "../interviewFeedback.service";

@graphql.Resolver(() => InterviewFeedback)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class InterviewFeedbackResolverBase {
  constructor(
    protected readonly service: InterviewFeedbackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _interviewFeedbacksMeta(
    @graphql.Args() args: InterviewFeedbackFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [InterviewFeedback])
  async interviewFeedbacks(
    @graphql.Args() args: InterviewFeedbackFindManyArgs
  ): Promise<InterviewFeedback[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => InterviewFeedback, { nullable: true })
  async interviewFeedback(
    @graphql.Args() args: InterviewFeedbackFindUniqueArgs
  ): Promise<InterviewFeedback | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => InterviewFeedback)
  async createInterviewFeedback(
    @graphql.Args() args: CreateInterviewFeedbackArgs
  ): Promise<InterviewFeedback> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        communication: args.data.communication
          ? {
              connect: args.data.communication,
            }
          : undefined,

        interview: args.data.interview
          ? {
              connect: args.data.interview,
            }
          : undefined,
      },
    });
  }

  @Public()
  @graphql.Mutation(() => InterviewFeedback)
  async updateInterviewFeedback(
    @graphql.Args() args: UpdateInterviewFeedbackArgs
  ): Promise<InterviewFeedback | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          communication: args.data.communication
            ? {
                connect: args.data.communication,
              }
            : undefined,

          interview: args.data.interview
            ? {
                connect: args.data.interview,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => InterviewFeedback)
  async deleteInterviewFeedback(
    @graphql.Args() args: DeleteInterviewFeedbackArgs
  ): Promise<InterviewFeedback | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [SkillLevel])
  async skillMatrices(
    @graphql.Parent() parent: InterviewFeedback,
    @graphql.Args() args: SkillLevelFindManyArgs
  ): Promise<SkillLevel[]> {
    const results = await this.service.findSkillMatrices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => [SkillSet])
  async skillSets(
    @graphql.Parent() parent: InterviewFeedback,
    @graphql.Args() args: SkillSetFindManyArgs
  ): Promise<SkillSet[]> {
    const results = await this.service.findSkillSets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => CommunicationFeedback, { nullable: true })
  async communication(
    @graphql.Parent() parent: InterviewFeedback
  ): Promise<CommunicationFeedback | null> {
    const result = await this.service.getCommunication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => Interview, { nullable: true })
  async interview(
    @graphql.Parent() parent: InterviewFeedback
  ): Promise<Interview | null> {
    const result = await this.service.getInterview(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
