/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateCommunicationFeedbackArgs } from "./CreateCommunicationFeedbackArgs";
import { UpdateCommunicationFeedbackArgs } from "./UpdateCommunicationFeedbackArgs";
import { DeleteCommunicationFeedbackArgs } from "./DeleteCommunicationFeedbackArgs";
import { CommunicationFeedbackFindManyArgs } from "./CommunicationFeedbackFindManyArgs";
import { CommunicationFeedbackFindUniqueArgs } from "./CommunicationFeedbackFindUniqueArgs";
import { CommunicationFeedback } from "./CommunicationFeedback";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { InterviewFeedback } from "../../interviewFeedback/base/InterviewFeedback";
import { CommunicationFeedbackService } from "../communicationFeedback.service";

@graphql.Resolver(() => CommunicationFeedback)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CommunicationFeedbackResolverBase {
  constructor(
    protected readonly service: CommunicationFeedbackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _communicationFeedbacksMeta(
    @graphql.Args() args: CommunicationFeedbackFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [CommunicationFeedback])
  async communicationFeedbacks(
    @graphql.Args() args: CommunicationFeedbackFindManyArgs
  ): Promise<CommunicationFeedback[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => CommunicationFeedback, { nullable: true })
  async communicationFeedback(
    @graphql.Args() args: CommunicationFeedbackFindUniqueArgs
  ): Promise<CommunicationFeedback | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => CommunicationFeedback)
  async createCommunicationFeedback(
    @graphql.Args() args: CreateCommunicationFeedbackArgs
  ): Promise<CommunicationFeedback> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        interviewFeedbacks: args.data.interviewFeedbacks
          ? {
              connect: args.data.interviewFeedbacks,
            }
          : undefined,
      },
    });
  }

  @Public()
  @graphql.Mutation(() => CommunicationFeedback)
  async updateCommunicationFeedback(
    @graphql.Args() args: UpdateCommunicationFeedbackArgs
  ): Promise<CommunicationFeedback | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          interviewFeedbacks: args.data.interviewFeedbacks
            ? {
                connect: args.data.interviewFeedbacks,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => CommunicationFeedback)
  async deleteCommunicationFeedback(
    @graphql.Args() args: DeleteCommunicationFeedbackArgs
  ): Promise<CommunicationFeedback | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [Candidate])
  async candidates(
    @graphql.Parent() parent: CommunicationFeedback,
    @graphql.Args() args: CandidateFindManyArgs
  ): Promise<Candidate[]> {
    const results = await this.service.findCandidates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => InterviewFeedback, { nullable: true })
  async interviewFeedbacks(
    @graphql.Parent() parent: CommunicationFeedback
  ): Promise<InterviewFeedback | null> {
    const result = await this.service.getInterviewFeedbacks(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
