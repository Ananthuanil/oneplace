datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  aadarNumber            String?
  address                String?
  awards                 Award[]              @relation(name: "awards")
  bloodGroup             String?
  candidates             Candidate[]
  careerStartDate        DateTime?
  community              Community?           @relation(fields: [communityId], references: [id])
  communityId            String?
  contactNumber          String?
  courseOutDate          DateTime?
  createdAt              DateTime             @default(now())
  dateOfJoining          DateTime?
  designation            EnumUserDesignation?
  dob                    DateTime?
  email                  String?
  emergencyContactNumber String?
  firstName              String
  folderLink             String?
  fwExperience           String?
  gender                 EnumUserGender?
  id                     String               @id @default(cuid())
  image                  String?
  imageLink              String?
  interviews             Interview[]
  lastName               String
  mappedPerson           Opportunity[]        @relation(name: "OpportunityMappedPersonUserMappedPerson")
  opportunities          Opportunity[]        @relation(name: "claimedPerson")
  panNumber              String?
  password               String
  personalEmailId        String?
  previousFirmOutDate    DateTime?
  project                Project[]
  projectInvolved        ProjectInvolvement[]
  resumeLink             String?
  roles                  String[]
  skillLevel             SkillLevel?          @relation(fields: [skillLevelId], references: [id])
  skillLevelId           String?
  skillSets              SkillSet[]
  toPerson               Award[]              @relation(name: "AwardToPersonUserToPerson")
  totalExperience        String
  updatedAt              DateTime             @updatedAt
  username               String               @unique
}

model Community {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  name        String?
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Skill {
  candidate                   Candidate?   @relation(fields: [candidateId], references: [id])
  candidateId                 String?
  createdAt                   DateTime     @default(now())
  id                          String       @id @default(cuid())
  name                        String?
  opportunity                 Opportunity? @relation(name: "optionalSkillset", fields: [opportunityId], references: [id])
  opportunityId               String?
  oppurtunatyRequiredSkills   Opportunity? @relation(name: "oppurtunatyRequiredSkills", fields: [oppurtunatyRequiredSkillsId], references: [id])
  oppurtunatyRequiredSkillsId String?
  skillMatrices               SkillLevel[]
  skillSets                   SkillSet[]
  updatedAt                   DateTime?    @updatedAt
}

model SkillSet {
  candidate           Candidate?         @relation(fields: [candidateId], references: [id])
  candidateId         String?
  createdAt           DateTime           @default(now())
  employees           User[]
  expertiseLevel      Int?
  id                  String             @id @default(cuid())
  interviewFeedback   InterviewFeedback? @relation(fields: [interviewFeedbackId], references: [id])
  interviewFeedbackId String?
  skill               Skill?             @relation(fields: [skillId], references: [id])
  skillId             String?
  updatedAt           DateTime           @updatedAt
}

model Candidate {
  additionalComments         String?
  category                   EnumCandidateCategory
  competitorCtc              Float?
  createdAt                  DateTime              @default(now())
  currentCtc                 Float?
  currentDesignation         String?
  currentFirm                String?
  currentStatus              String
  email                      String
  expectedCtc                Float?
  externalRecruitmentPartner String?
  id                         String                @id @default(cuid())
  interviews                 Interview[]
  isOnNoticePeriod           Boolean
  lastWorkingDay             DateTime?
  name                       String
  noticePeriodTime           Float?
  referalEmployee            User?                 @relation(fields: [referalEmployeeId], references: [id])
  referalEmployeeId          String?
  resume                     String?
  skills                     Skill[]
  skillSets                  SkillSet[]
  source                     EnumCandidateSource
  totalExperience            Int
  updatedAt                  DateTime              @updatedAt
}

model InterviewFeedback {
  attitudeFeedback     String?
  comments             String?
  communication        CommunicationFeedback?       @relation(fields: [communicationId], references: [id])
  communicationId      String?                      @unique
  createdAt            DateTime                     @default(now())
  feedback             String
  id                   String                       @id @default(cuid())
  interview            Interview?                   @relation(fields: [interviewId], references: [id])
  interviewId          String?
  logicFeedback        String?
  relevantTechFeedback String?
  skillMatrices        SkillLevel[]
  skillSets            SkillSet[]
  status               EnumInterviewFeedbackStatus?
  updatedAt            DateTime                     @updatedAt
}

model Interview {
  calendarScheduleId String?
  candidate          Candidate?          @relation(fields: [candidateId], references: [id])
  candidateId        String?
  closed             Boolean?
  createdAt          DateTime            @default(now())
  currentStatus      String?
  date               DateTime?
  endDate            DateTime?
  feedback           InterviewFeedback[]
  id                 String              @id @default(cuid())
  interviewer        User?               @relation(fields: [interviewerId], references: [id])
  interviewerId      String?
  level              String?
  mode               String?
  opportunity        Opportunity?        @relation(fields: [opportunityId], references: [id])
  opportunityId      String?
  startDate          DateTime?
  subject            String?
  updatedAt          DateTime            @updatedAt
}

model Opportunity {
  claimedPerson      User?                             @relation(name: "claimedPerson", fields: [claimedPersonId], references: [id])
  claimedPersonId    String?
  createdAt          DateTime                          @default(now())
  currentStatus      String?
  id                 String                            @id @default(cuid())
  interviews         Interview[]
  mappedPerson       User?                             @relation(name: "OpportunityMappedPersonUserMappedPerson", fields: [mappedPersonId], references: [id])
  mappedPersonId     String?
  name               String?
  optionalSkillset   Skill[]                           @relation(name: "optionalSkillset")
  partner            Partner?                          @relation(fields: [partnerId], references: [id])
  partnerId          String?
  procurementStatus  EnumOpportunityProcurementStatus?
  project            Project?                          @relation(fields: [projectId], references: [id])
  projectId          String?
  requiredExperience Int?
  requiredSkills     Skill[]                           @relation(name: "oppurtunatyRequiredSkills")
  requirements       String?
  resumeId           String?
  source             EnumOpportunitySource?
  updatedAt          DateTime                          @updatedAt
  winOdds            Int?
}

model Partner {
  createdAt     DateTime      @default(now())
  description   String?
  id            String        @id @default(cuid())
  name          String?
  opportunities Opportunity[]
  projects      Project[]
  updatedAt     DateTime      @updatedAt
}

model Project {
  createdAt           DateTime             @default(now())
  id                  String               @id @default(cuid())
  name                String?
  opportunities       Opportunity[]
  partner             Partner?             @relation(fields: [partnerId], references: [id])
  partnerId           String?
  projectInvolvements ProjectInvolvement[]
  startDate           DateTime?
  updatedAt           DateTime             @updatedAt
  users               User[]
}

model CommunicationFeedback {
  abilityToArticulate   String?
  confidenceLevel       String?
  createdAt             DateTime           @default(now())
  englishSpeakingSkills String?
  id                    String             @id @default(cuid())
  interviewFeedbacks    InterviewFeedback?
  updatedAt             DateTime           @updatedAt
}

model Award {
  awardType    String?
  comment      String?
  createdAt    DateTime @default(now())
  fromPerson   User?    @relation(name: "awards", fields: [fromPersonId], references: [id])
  fromPersonId String?
  id           String   @id @default(cuid())
  toPerson     User?    @relation(name: "AwardToPersonUserToPerson", fields: [toPersonId], references: [id])
  toPersonId   String?
  updatedAt    DateTime @updatedAt
}

model ProjectInvolvement {
  createdAt             DateTime @default(now())
  id                    String   @id @default(cuid())
  involvementPercentage Int?
  project               Project? @relation(fields: [projectId], references: [id])
  projectId             String?
  updatedAt             DateTime @updatedAt
  user                  User?    @relation(fields: [userId], references: [id])
  userId                String?
}

model SkillLevel {
  createdAt           DateTime           @default(now())
  id                  String             @id @default(cuid())
  interviewFeedback   InterviewFeedback? @relation(fields: [interviewFeedbackId], references: [id])
  interviewFeedbackId String?
  level               Int?
  skill               Skill?             @relation(fields: [skillId], references: [id])
  skillId             String?
  updatedAt           DateTime           @updatedAt
  users               User[]
}

enum EnumUserDesignation {
  Joe
  Engineer
  SeniorEngineer
  Consultant
  SeniorConsultant
  PrincipalConsultant
  Director
  Cxo
}

enum EnumUserGender {
  Male
  Female
  Others
}

enum EnumCandidateCategory {
  P1
  P2
  P3
}

enum EnumCandidateSource {
  Internal
  Referral
  ExternalRecruitmentPartner
}

enum EnumInterviewFeedbackStatus {
  Passed
  NotPassed
  Hold
}

enum EnumOpportunityProcurementStatus {
  new
  replacement
}

enum EnumOpportunitySource {
  New
  BackFill
}