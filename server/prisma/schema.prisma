datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  aadarNumber                String?
  address                    String?
  awards                     Award[]                     @relation(name: "awards")
  bloodGroup                 String?
  candidates                 Candidate[]
  careerStartDate            DateTime?
  clientFeedbacks            ClientFeedback[]            @relation(name: "clientFeedbacks")
  communities                Community[]                 @relation(name: "communities")
  community                  Community?                  @relation(name: "CommunityOnUsers", fields: [communityId], references: [id])
  communityId                String?
  communityActivityFeedbacks CommunityActivityFeedback[]
  communityMentor            User?                       @relation(name: "communityMentor", fields: [communityMentorId], references: [id])
  communityMentorId          String?
  contactNumber              String?
  courseOutDate              DateTime?
  createdAt                  DateTime                    @default(now())
  dateOfJoining              DateTime?
  designation                EnumUserDesignation?
  dob                        DateTime?
  email                      String?
  emergencyContactNumber     String?
  employeeFeedbacks          EmployeeFeedback[]          @relation(name: "employeeFeedbacks")
  firstName                  String
  folderLink                 String?
  fwExperience               String?
  gender                     EnumUserGender?
  id                         String                      @id @default(cuid())
  image                      String?
  imageLink                  String?
  interviews                 Interview[]
  lastName                   String
  notifications              String?
  opportunities              Opportunity[]               @relation(name: "claimedPerson")
  opportunity                Opportunity[]               @relation(name: "mappedEmployee")
  organiser                  ClientFeedback[]            @relation(name: "ClientFeedbackOrganiserUserOrganiser")
  panNumber                  String?
  password                   String
  personalEmailId            String?
  previousFirmOutDate        DateTime?
  project                    Project[]
  projectInvolved            ProjectInvolvement[]
  resumeLink                 String?
  reviewer                   EmployeeFeedback[]          @relation(name: "EmployeeFeedbackReviewerUserReviewer")
  roles                      Json
  secondaryEmail             String?
  skillLevel                 SkillLevel?                 @relation(fields: [skillLevelId], references: [id])
  skillLevelId               String?
  skillSets                  SkillSet[]
  toPerson                   Award[]                     @relation(name: "AwardToPersonUserToPerson")
  totalExperience            String
  updatedAt                  DateTime                    @updatedAt
  username                   String                      @unique
  users                      User[]                      @relation(name: "communityMentor")
}

model Community {
  communityActivities CommunityActivity[]
  communityLeads      User[]              @relation(name: "communities")
  createdAt           DateTime            @default(now())
  description         String?
  id                  String              @id @default(cuid())
  name                String?
  updatedAt           DateTime            @updatedAt
  users               User[]              @relation(name: "CommunityOnUsers")
}

model Skill {
  candidate                   Candidate[]
  createdAt                   DateTime     @default(now())
  id                          String       @id @default(cuid())
  name                        String       @unique
  opportunity                 Opportunity? @relation(name: "optionalSkillset", fields: [opportunityId], references: [id])
  opportunityId               String?
  oppurtunatyRequiredSkills   Opportunity? @relation(name: "oppurtunatyRequiredSkills", fields: [oppurtunatyRequiredSkillsId], references: [id])
  oppurtunatyRequiredSkillsId String?
  skillMatrices               SkillLevel[]
  skillSets                   SkillSet[]
  updatedAt                   DateTime?    @updatedAt
}

model SkillSet {
  candidate           Candidate?         @relation(fields: [candidateId], references: [id])
  candidateId         String?
  createdAt           DateTime           @default(now())
  employees           User[]
  expertiseLevel      Int?
  id                  String             @id @default(cuid())
  interviewFeedback   InterviewFeedback? @relation(fields: [interviewFeedbackId], references: [id])
  interviewFeedbackId String?
  skill               Skill?             @relation(fields: [skillId], references: [id])
  skillId             String?
  updatedAt           DateTime           @updatedAt
}

model Candidate {
  additionalComments           String?
  candidateOpportunity         Opportunity[]          @relation(name: "candidateOpportunity")
  category                     EnumCandidateCategory
  communicationFeedback        CommunicationFeedback?
  competitorCtc                Float?
  createdAt                    DateTime               @default(now())
  currentCtc                   Float?
  currentDesignation           String?
  currentFirm                  String?
  currentStatus                String
  email                        String
  expectedCtc                  Float?
  externalRecruitmentPartner   RecruitmentPartner?    @relation(fields: [externalRecruitmentPartnerId], references: [id])
  externalRecruitmentPartnerId String?
  id                           String                 @id @default(cuid())
  interviews                   Interview[]
  isOnNoticePeriod             Boolean
  lastWorkingDay               DateTime?
  name                         String
  noticePeriodTime             Float?
  opportunities                Opportunity[]          @relation(name: "mappedPerson")
  opportunity                  Opportunity?           @relation(name: "CandidatesOnOpportunity", fields: [opportunityId], references: [id])
  opportunityId                String?
  referalEmployee              User?                  @relation(fields: [referalEmployeeId], references: [id])
  referalEmployeeId            String?
  resume                       String?
  skills                       Skill[]
  skillSets                    SkillSet[]
  source                       EnumCandidateSource
  totalExperience              Float
  updatedAt                    DateTime               @updatedAt
}

model InterviewFeedback {
  attitudeFeedback     String?
  comments             String?
  communication        CommunicationFeedback?       @relation(fields: [communicationId], references: [id])
  communicationId      String?                      @unique
  createdAt            DateTime                     @default(now())
  feedback             String
  id                   String                       @id @default(cuid())
  interview            Interview?                   @relation(fields: [interviewId], references: [id])
  interviewId          String?
  logicFeedback        String?
  relevantTechFeedback String?
  skillMatrices        SkillLevel[]
  skillSets            SkillSet[]
  status               EnumInterviewFeedbackStatus?
  updatedAt            DateTime                     @updatedAt
}

model Interview {
  calendarScheduleId String?
  candidate          Candidate?          @relation(fields: [candidateId], references: [id])
  candidateId        String?
  closed             Boolean?
  createdAt          DateTime            @default(now())
  currentStatus      String?
  date               DateTime?
  emailStatus        Boolean?
  endDate            DateTime?
  feedback           InterviewFeedback[]
  id                 String              @id @default(cuid())
  interviewer        User?               @relation(fields: [interviewerId], references: [id])
  interviewerId      String?
  level              String?
  mode               String?
  startDate          DateTime?
  subject            String?
  updatedAt          DateTime            @updatedAt
}

model Opportunity {
  candidates         Candidate[]                       @relation(name: "CandidatesOnOpportunity")
  claimedPerson      User?                             @relation(name: "claimedPerson", fields: [claimedPersonId], references: [id])
  claimedPersonId    String?
  createdAt          DateTime                          @default(now())
  currentStatus      String?
  id                 String                            @id @default(cuid())
  mappedCandidates   Candidate[]                       @relation(name: "candidateOpportunity")
  mappedEmployee     User[]                            @relation(name: "mappedEmployee")
  mappedPerson       Candidate[]                       @relation(name: "mappedPerson")
  name               String?
  optionalSkillset   Skill[]                           @relation(name: "optionalSkillset")
  partner            Partner?                          @relation(fields: [partnerId], references: [id])
  partnerId          String?
  procurementStatus  EnumOpportunityProcurementStatus?
  project            Project?                          @relation(fields: [projectId], references: [id])
  projectId          String?
  requiredExperience Int?
  requiredSkills     Skill[]                           @relation(name: "oppurtunatyRequiredSkills")
  requirements       String?
  resumeId           String?
  source             EnumOpportunitySource?
  updatedAt          DateTime                          @updatedAt
  winOdds            Int?
}

model Partner {
  createdAt     DateTime      @default(now())
  description   String?
  id            String        @id @default(cuid())
  name          String?
  opportunities Opportunity[]
  projects      Project[]
  updatedAt     DateTime      @updatedAt
}

model Project {
  createdAt           DateTime             @default(now())
  id                  String               @id @default(cuid())
  name                String?
  opportunities       Opportunity[]
  partner             Partner?             @relation(fields: [partnerId], references: [id])
  partnerId           String?
  projectInvolvements ProjectInvolvement[]
  startDate           DateTime?
  tasks               Task[]
  updatedAt           DateTime             @updatedAt
  users               User[]
}

model CommunicationFeedback {
  abilityToArticulate   String?
  candidates            Candidate?         @relation(fields: [candidatesId], references: [id])
  candidatesId          String?            @unique
  confidenceLevel       String?
  createdAt             DateTime           @default(now())
  englishSpeakingSkills String?
  id                    String             @id @default(cuid())
  interviewFeedbacks    InterviewFeedback?
  updatedAt             DateTime           @updatedAt
}

model Award {
  awardType    String?
  comment      String?
  createdAt    DateTime @default(now())
  fromPerson   User?    @relation(name: "awards", fields: [fromPersonId], references: [id])
  fromPersonId String?
  id           String   @id @default(cuid())
  toPerson     User?    @relation(name: "AwardToPersonUserToPerson", fields: [toPersonId], references: [id])
  toPersonId   String?
  updatedAt    DateTime @updatedAt
}

model ProjectInvolvement {
  createdAt             DateTime @default(now())
  id                    String   @id @default(cuid())
  involvementPercentage Int?
  project               Project? @relation(fields: [projectId], references: [id])
  projectId             String?
  updatedAt             DateTime @updatedAt
  user                  User?    @relation(fields: [userId], references: [id])
  userId                String?
}

model SkillLevel {
  createdAt           DateTime           @default(now())
  id                  String             @id @default(cuid())
  interviewFeedback   InterviewFeedback? @relation(fields: [interviewFeedbackId], references: [id])
  interviewFeedbackId String?
  level               Int?
  skill               Skill?             @relation(fields: [skillId], references: [id])
  skillId             String?
  updatedAt           DateTime           @updatedAt
  users               User[]
}

model RecruitmentPartner {
  candidates Candidate[]
  createdAt  DateTime    @default(now())
  id         String      @id @default(cuid())
  name       String?
  updatedAt  DateTime    @updatedAt
}

model EmployeeFeedback {
  area       String
  createdAt  DateTime                   @default(now())
  date       DateTime
  employee   User                       @relation(name: "employeeFeedbacks", fields: [employeeId], references: [id])
  employeeId String
  id         String                     @id @default(cuid())
  nature     EnumEmployeeFeedbackNature
  remark     String
  reviewer   User                       @relation(name: "EmployeeFeedbackReviewerUserReviewer", fields: [reviewerId], references: [id])
  reviewerId String
  updatedAt  DateTime                   @updatedAt
}

model CommunityActivity {
  community                  Community                   @relation(fields: [communityId], references: [id])
  communityId                String
  communityActivityFeedbacks CommunityActivityFeedback[]
  createdAt                  DateTime                    @default(now())
  date                       DateTime
  description                String
  id                         String                      @id @default(cuid())
  title                      String
  updatedAt                  DateTime                    @updatedAt
}

model CommunityActivityFeedback {
  activity         CommunityActivity? @relation(fields: [activityId], references: [id])
  activityId       String?
  activityFeedback String?
  attendance       Boolean
  createdAt        DateTime           @default(now())
  employee         User               @relation(fields: [employeeId], references: [id])
  employeeId       String
  id               String             @id @default(cuid())
  rating           Float?
  updatedAt        DateTime           @updatedAt
}

model ClientFeedback {
  createdAt             DateTime                  @default(now())
  detailedFeedback      String?
  employee              User?                     @relation(name: "clientFeedbacks", fields: [employeeId], references: [id])
  employeeId            String?
  id                    String                    @id @default(cuid())
  improvementNeeded     String?
  meetingEtiquite       Int?
  organiser             User?                     @relation(name: "ClientFeedbackOrganiserUserOrganiser", fields: [organiserId], references: [id])
  organiserId           String?
  processGovernance     Int?
  project               String?
  qualityOfDeliverables Int?
  reportingManager      String?
  reviewerEmail         String?
  reviewerName          String?
  role                  String?
  status                EnumClientFeedbackStatus?
  teamWork              Int?
  technicalExpertise    Int?
  updatedAt             DateTime                  @updatedAt
}

model Task {
  attendance    Attendance?    @relation(fields: [attendanceId], references: [id])
  attendanceId  String?
  createdAt     DateTime       @default(now())
  id            String         @id @default(cuid())
  project       Project?       @relation(fields: [projectId], references: [id])
  projectId     String?
  specification String?
  status        EnumTaskStatus
  ticketId      String?
  ticketLink    String?
  ticketName    String
  updatedAt     DateTime       @updatedAt
}

model Attendance {
  createdAt  DateTime                @default(now())
  id         String                  @id @default(cuid())
  loginTime  String?
  logoutTime String?
  office     EnumAttendanceOffice?
  tasks      Task[]
  updatedAt  DateTime                @updatedAt
  workMode   EnumAttendanceWorkMode?
}

enum EnumUserDesignation {
  Joe
  Engineer
  SeniorEngineer
  Consultant
  SeniorConsultant
  PrincipalConsultant
  Director
  Cxo
}

enum EnumUserGender {
  Male
  Female
  Others
}

enum EnumCandidateCategory {
  P1
  P2
  P3
}

enum EnumCandidateSource {
  Internal
  Referral
  ExternalRecruitmentPartner
}

enum EnumInterviewFeedbackStatus {
  Passed
  NotPassed
  Hold
}

enum EnumOpportunityProcurementStatus {
  new
  replacement
}

enum EnumOpportunitySource {
  New
  BackFill
}

enum EnumEmployeeFeedbackNature {
  Positive
  Negative
  Neutral
}

enum EnumClientFeedbackStatus {
  LinkGenerated
  WaitingForFeedback
  FeedbackReceived
  NoResponse
}

enum EnumTaskStatus {
  Completed
  inProgress
  blocker
}

enum EnumAttendanceOffice {
  mgRoad
  infopark
}

enum EnumAttendanceWorkMode {
  WFO
  WFH
}